# have all necessary schemas in search path
set.search.path = SET search_path = dosrek, public, pg_catalog

# The following statement does the dose reconstruction.
# Explanation of single CTEs and final statement:
# voronoi:         Prepares data from jrodos table for the analysis
# track_data:      Prepares linestring data from the users request
#                  for the analysis
# voronoi_track:   Select voronoi polygons which intersect linestring
#                  in time and space;
#                  reduce linestring to common timerange with polygon,
#                  based on the assumption
#                  of constant speed along the whole linestring;
#                  calculate duration of intersection in time ('idur').
# org_dose:        Filter organ dose factors by age group and foetus stadium.
# resid:           Filter reduction factors by given residence.
# acts:            Filter reduction factors by given protection actions.
# acts_exp:        Reduction factor has to be 1 if no protection actions
#                  are given.
# exp_path:        For each exposure path and polygon, multiply doserate
#                  with duration of intersection in time,
#                  then multiply with relative length of intersection in space.
#                  For each exposure path, sum up dose of all intersections.
#                  Durations are given in seconds by the statements.
#                  Doserate is assumed to be given per hour.
# final statement: Multiply dose per exposure path with organ dose factor
#                  and reduction factors. Sum up doses of exposure paths
#                  per organ and return.
select.segment = \
WITH \
voronoi AS ( SELECT \
        tsrange(CAST(date AS timestamp) - interval '1 hour', \
            CAST(date AS timestamp), '(]') AS trange, \
        gid   AS id,  \
        geom  AS poly \
    FROM jrodos ), \
track_data AS ( SELECT \
        tsrange(:begin, :end)        AS trange, \
        ST_GeomFromText(:geom, 4326) AS line,   \
        CAST(:begin as timestamp)    AS t_start,\
        CAST(date_part('epoch', \
                CAST(:end as timestamp) - CAST(:begin as timestamp)) as float \
            ) AS duration \
    ), \
voronoi_track AS ( SELECT \
        poly, \
        id,   \
        ST_LineSubstring(line, \
            date_part('epoch', \
                CAST(lower(v.trange * t.trange) - t_start AS interval)) \
            / duration, \
            date_part('epoch', \
                CAST(upper(v.trange * t.trange) - t_start AS interval)) \
            / duration \
            ) AS line, \
        date_part('epoch', \
            CAST(upper(v.trange * t.trange) - lower(v.trange * t.trange) \
                AS interval) \
            ) AS idur \
    FROM track_data t JOIN voronoi v \
        ON ST_Intersects(line, poly) AND v.trange && t.trange), \
org_dose AS ( SELECT \
        o.key as o_key, \
        exposure_id, \
        factor \
    FROM agegroupexposureorgan aeo  \
    JOIN organ o ON  aeo.organ_id = o.id \
    JOIN agegroup a ON aeo.agegroup_id = a.id \
    WHERE (o.key NOT LIKE 'foetus_%' \
            OR o.key = 'foetus_' || coalesce(:foetus, '')) \
        AND a.key = :age), \
resid AS ( SELECT \
        exposure_id, \
        factor \
    FROM exposureresidence er \
        JOIN residence r ON er.residence_id = r.id \
    WHERE r.key = :residence), \
acts AS ( SELECT \
        product(factor) as factor, \
        exposure_id \
    FROM action a \
        JOIN actionexposure ae ON a.id = ae.action_id \
    WHERE key = ANY ( string_to_array(:actions, ',') ) \
    GROUP BY exposure_id), \
acts_exp AS ( SELECT \
        coalesce(factor, 1) AS factor, \
        e.id AS exposure_id \
    FROM acts a \
        FULL OUTER JOIN exposure e ON a.exposure_id = e.id ), \
exp_path AS ( SELECT \
        exp.id AS exp_id, \
        sum(jexp.doserate * idur * ST_Length(ST_Intersection(line, poly)) \
            / ST_Length(line) / CAST(3600 as float)) AS value \
    FROM voronoi_track \
        JOIN jrodosexposure jexp ON voronoi_track.id = jexp.jrodos_id \
        JOIN exposure exp ON jexp.exposure_id = exp.id \
    GROUP BY exp.id ) \
SELECT \
        o_key, \
        sum(exp_path.value * org_dose.factor * resid.factor * acts_exp.factor)\
    FROM exp_path \
        JOIN org_dose ON exp_path.exp_id = org_dose.exposure_id \
        JOIN resid ON exp_path.exp_id = resid.exposure_id \
        JOIN acts_exp ON exp_path.exp_id = acts_exp.exposure_id \
    GROUP BY o_key
